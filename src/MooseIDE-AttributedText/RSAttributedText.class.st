"
TODO
"
Class {
	#name : #RSAttributedText,
	#superclass : #RSAbstractContainerBuilder,
	#instVars : [
		'text',
		'attributes'
	],
	#category : #'MooseIDE-AttributedText'
}

{ #category : #adding }
RSAttributedText >> addAttribute: attribute from: from to: to [
	attribute
		from: from;
		to: to.
	attributes add: attribute.
]

{ #category : #hooks }
RSAttributedText >> canvasController [
	| c |
	c := RSCanvasController simple.
	c interactions removeKey: RSZoomableCanvasInteraction.
	c interactions at: RSScrollWheelCanvasInteraction put: RSScrollWheelCanvasInteraction new.
	c configuration 
		padding: 10;
		hasHorizontalScrolling: false.
	^ c
	
]

{ #category : #examples }
RSAttributedText >> example01 [
	<script: 'self new example01 open'>
	| string |
	string := 'context function foo base 123 context
function 123
  123function123
  123   context    context
fun
  context'.
	self text: string.
	self tagAll: 'context' in: string with: RSTagEmphasisAttribute.
	self tagAll: 'function' in: string with: RSLinkEmphasisAttribute.
	self tagAll: 'function' in: string with: RSTagEmphasisAttribute.
	^ self
	
]

{ #category : #examples }
RSAttributedText >> example02 [
	<script: 'self new example02 open'>
	| string |
	string := String fromByteArray: self sourceCodeExample base64Decoded.
	self text: string.
	{ {'context'. 'function'} -> RSTagEmphasisAttribute } do: [:as |
		as key do: [ :word | self tagAll: word in: string with: as value ]
		 ].
	^ self
	
]

{ #category : #examples }
RSAttributedText >> example03 [
	<script: 'self new example03 open'>
	| string |
	string := '      context = canvas.getContext("2d")     context,  context
'.
	self text: string.
	{ {'context'. 'function'} -> RSTagEmphasisAttribute } do: [:as |
		as key do: [ :word | self tagAll: word in: string with: as value ]
		 ].
	^ self
	
]

{ #category : #initialization }
RSAttributedText >> initialize [
	super initialize.
	attributes := OrderedCollection new.
]

{ #category : #hooks }
RSAttributedText >> renderAttributes: comp [
	attributes do: [ :att | att renderIn: comp ].
]

{ #category : #hooks }
RSAttributedText >> renderIn: aCanvas [
	| theme b comp |
	theme := Smalltalk ui theme.
	aCanvas color: theme backgroundColor.
	b := RSMultilineLabelBuilder new.
	b layout: (RSVerticalLineLayout new gapSize: 1).
	b labelShape color: theme textColor.
	comp := b shapeFor: text.
	comp model: text.
	self renderAttributes: comp.
	aCanvas add: comp.
	
	aCanvas @ self canvasController.
	
]

{ #category : #examples }
RSAttributedText >> sourceCodeExample [
	^ 'PCFET0NUWVBFIGh0bWw+DQo8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQo8Y2FudmFzIHdpZHRoPSI5NjAiIGhlaWdodD0iNTAwIj48L2NhbnZhcz4NCjxzY3JpcHQ+DQoNCi8qIGh0dHBzOi8vZ2l0aHViLmNvbS9kMy9kMy12b3Jvbm9pIENvcHlyaWdodCAyMDE1IE1pa2UgQm9zdG9jayAqLw0KIWZ1bmN0aW9uKGUsdCl7Im9iamVjdCI9PXR5cGVvZiBleHBvcnRzJiYidW5kZWZpbmVkIiE9dHlwZW9mIG1vZHVsZT90KGV4cG9ydHMpOiJmdW5jdGlvbiI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFsiZXhwb3J0cyJdLHQpOnQoZS52b3Jvbm9pPXt9KX0odGhpcyxmdW5jdGlvbihlKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gdChlKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZX19ZnVuY3Rpb24gbihlLHQsbil7cmV0dXJuKGUueC1uLngpKih0LnktZS55KS0oZS54LXQueCkqKG4ueS1lLnkpfWZ1bmN0aW9uIGkoZSx0KXtyZXR1cm4gdC5hbmdsZS1lLmFuZ2xlfWZ1bmN0aW9uIHIoZSx0KXt0aGlzLmw9ZSx0aGlzLnI9dCx0aGlzLmE9dGhpcy5iPW51bGx9ZnVuY3Rpb24gcyhlLHQsbil7dmFyIGk9bmV3IHIoZSxudWxsKTtyZXR1cm4gaS5hPXQsaS5iPW4sRC5wdXNoKGkpLGl9ZnVuY3Rpb24gdShlLHQsbil7dGhpcy5lZGdlPWUsdGhpcy5zaXRlPXQsdGhpcy5hbmdsZT1ufWZ1bmN0aW9uIGYoZSx0LG4pe3ZhciBpPWUuYSxyPWUuYjtyZXR1cm4gbmV3IHUoZSx0LG4/TWF0aC5hdGFuMihuLnktdC55LG4ueC10LngpOmUubD09PXQ/TWF0aC5hdGFuMihyLngtaS54LGkueS1yLnkpOk1hdGguYXRhbjIoaS54LXIueCxyLnktaS55KSl9ZnVuY3Rpb24gYShlLHQsbixpKXtmb3IodmFyIHIsdSxhLGwsbyxjLGgseSx4LHYsZz1CLmxlbmd0aDtnLS07KWlmKG89QltnXSxvJiZvLnByZXBhcmUoKSlmb3IoaD1vLmVkZ2VzLHk9aC5sZW5ndGgsYz0wO3k+Yzspdj1oW2NdLmVuZCgpLGE9di54LGw9di55LHg9aFsrK2MleV0uc3RhcnQoKSxyPXgueCx1PXgueSwoTWF0aC5hYnMoYS1yKT5JfHxNYXRoLmFicyhsLXUpPkkpJiYoaC5zcGxpY2UoYywwLGYocyhvLnNpdGUsdixNYXRoLmFicyhhLWUpPEkmJmktbD5JP3t4OmUseTpNYXRoLmFicyhyLWUpPEk/dTppfTpNYXRoLmFicyhsLWkpPEkmJm4tYT5JP3t4Ok1hdGguYWJzKHUtaSk8ST9yOm4seTppfTpNYXRoLmFicyhhLW4pPEkmJmwtdD5JP3t4Om4seTpNYXRoLmFicyhyLW4pPEk/dTp0fTpNYXRoLmFicyhsLXQpPEkmJmEtZT5JP3t4Ok1hdGguYWJzKHUtdCk8ST9yOmUseTp0fTpudWxsKSxvLnNpdGUsbnVsbCkpLCsreSl9ZnVuY3Rpb24gbChlLHQsbixpLHIpe3ZhciBzLHU9ZS5hLGY9ZS5iLGE9dS54LGw9dS55LG89Zi54LGM9Zi55LGg9MCx5PTEseD1vLWEsdj1jLWw7aWYocz10LWEseHx8IShzPjApKXtpZihzLz14LDA+eCl7aWYoaD5zKXJldHVybjt5PnMmJih5PXMpfWVsc2UgaWYoeD4wKXtpZihzPnkpcmV0dXJuO3M+aCYmKGg9cyl9aWYocz1pLWEseHx8ISgwPnMpKXtpZihzLz14LDA+eCl7aWYocz55KXJldHVybjtzPmgmJihoPXMpfWVsc2UgaWYoeD4wKXtpZihoPnMpcmV0dXJuO3k+cyYmKHk9cyl9aWYocz1uLWwsdnx8IShzPjApKXtpZihzLz12LDA+dil7aWYoaD5zKXJldHVybjt5PnMmJih5PXMpfWVsc2UgaWYodj4wKXtpZihzPnkpcmV0dXJuO3M+aCYmKGg9cyl9aWYocz1yLWwsdnx8ISgwPnMpKXtpZihzLz12LDA+dil7aWYocz55KXJldHVybjtzPmgmJihoPXMpfWVsc2UgaWYodj4wKXtpZihoPnMpcmV0dXJuO3k+cyYmKHk9cyl9cmV0dXJuIGg+MCYmKGUuYT17eDphK2gqeCx5OmwraCp2fSksMT55JiYoZS5iPXt4OmEreSp4LHk6bCt5KnZ9KSxlfX19fX1mdW5jdGlvbiBvKGUsdCxuLGkscil7dmFyIHM9ZS5iO2lmKHMpcmV0dXJuITA7dmFyIHUsZixhPWUuYSxsPWUubCxvPWUucixjPWwueCxoPWwueSx5PW8ueCx4PW8ueSx2PShjK3kpLzIsZz0oaCt4KS8yO2lmKHg9PT1oKXtpZih0PnZ8fHY+PWkpcmV0dXJuO2lmKGM+eSl7aWYoYSl7aWYoYS55Pj1yKXJldHVybn1lbHNlIGE9e3g6dix5Om59O3M9e3g6dix5OnJ9fWVsc2V7aWYoYSl7aWYoYS55PG4pcmV0dXJufWVsc2UgYT17eDp2LHk6cn07cz17eDp2LHk6bn19fWVsc2UgaWYodT0oYy15KS8oeC1oKSxmPWctdSp2LC0xPnV8fHU+MSlpZihjPnkpe2lmKGEpe2lmKGEueT49cilyZXR1cm59ZWxzZSBhPXt4OihuLWYpL3UseTpufTtzPXt4OihyLWYpL3UseTpyfX1lbHNle2lmKGEpe2lmKGEueTxuKXJldHVybn1lbHNlIGE9e3g6KHItZikvdSx5OnJ9O3M9e3g6KG4tZikvdSx5Om59fWVsc2UgaWYoeD5oKXtpZihhKXtpZihhLng+PWkpcmV0dXJufWVsc2UgYT17eDp0LHk6dSp0K2Z9O3M9e3g6aSx5OnUqaStmfX1lbHNle2lmKGEpe2lmKGEueDx0KXJldHVybn1lbHNlIGE9e3g6aSx5OnUqaStmfTtzPXt4OnQseTp1KnQrZn19cmV0dXJuIGUuYT1hLGUuYj1zLCEwfWZ1bmN0aW9uIGMoZSx0LG4saSl7Zm9yKHZhciByLHM9RC5sZW5ndGg7cy0tOylyPURbc10sKCFvKHIsZSx0LG4saSl8fCFsKHIsZSx0LG4saSl8fE1hdGguYWJzKHIuYS54LXIuYi54KTxJJiZNYXRoLmFicyhyLmEueS1yLmIueSk8SSkmJihyLmE9ci5iPW51bGwsRC5zcGxpY2UocywxKSl9ZnVuY3Rpb24gaChlKXtlLlU9ZS5DPWUuTD1lLlI9ZS5QPWUuTj1udWxsfWZ1bmN0aW9uIHkoZSl7dmFyIHQ9ZS5jaXJjbGU7dCYmKHQuUHx8KEo9dC5OKSxGLnJlbW92ZSh0KSxLLnB1c2godCksaCh0KSxlLmNpcmNsZT1udWxsKX1mdW5jdGlvbiB4KCl7aCh0aGlzKSx0aGlzLng9dGhpcy55PXRoaXMuYXJjPXRoaXMuc2l0ZT10aGlzLmN5PW51bGx9ZnVuY3Rpb24gdihlKXt2YXIgdD1lLlAsbj1lLk47aWYodCYmbil7dmFyIGk9dC5zaXRlLHI9ZS5zaXRlLHM9bi5zaXRlO2lmKGkhPT1zKXt2YXIgdT1yLngsZj1yLnksYT1pLngtdSxsPWkueS1mLG89cy54LXUsYz1zLnktZixoPTIqKGEqYy1sKm8pO2lmKCEoaD49LU8pKXt2YXIgeT1hKmErbCpsLHY9bypvK2MqYyxnPShjKnktbCp2KS9oLEM9KGEqdi1vKnkpL2gsYz1DK2YsZD1LLnBvcCgpfHxuZXcgeDtkLmFyYz1lLGQuc2l0ZT1yLGQueD1nK3UsZC55PWMrTWF0aC5zcXJ0KGcqZytDKkMpLGQuY3k9YyxlLmNpcmNsZT1kO2Zvcih2YXIgcD1udWxsLEw9Ri5fO0w7KWlmKGQueTxMLnl8fGQueT09PUwueSYmZC54PD1MLngpe2lmKCFMLkwpe3A9TC5QO2JyZWFrfUw9TC5MfWVsc2V7aWYoIUwuUil7cD1MO2JyZWFrfUw9TC5SfUYuaW5zZXJ0KHAsZCkscHx8KEo9ZCl9fX19ZnVuY3Rpb24gZyhlLHQsbixpKXtlLmF8fGUuYj9lLmw9PT1uP2UuYj1pOmUuYT1pOihlLmE9aSxlLmw9dCxlLnI9bil9ZnVuY3Rpb24gQyhlLHQsbixpKXt2YXIgcz1uZXcgcihlLHQpO3JldHVybiBELnB1c2gocyksbiYmZyhzLGUsdCxuKSxpJiZnKHMsdCxlLGkpLEJbZS5pXS5lZGdlcy5wdXNoKGYocyxlLHQpKSxCW3QuaV0uZWRnZXMucHVzaChmKHMsdCxlKSksc31mdW5jdGlvbiBkKCl7aCh0aGlzKSx0aGlzLmVkZ2U9dGhpcy5zaXRlPXRoaXMuY2lyY2xlPW51bGx9ZnVuY3Rpb24gcChlKXt2YXIgdD1RLnBvcCgpfHxuZXcgZDtyZXR1cm4gdC5zaXRlPWUsdH1mdW5jdGlvbiBMKGUpe3koZSksRy5yZW1vdmUoZSksUS5wdXNoKGUpLGgoZSl9ZnVuY3Rpb24gYihlKXt2YXIgdD1lLmNpcmNsZSxuPXQueCxpPXQuY3kscj17eDpuLHk6aX0scz1lLlAsdT1lLk4sZj1bZV07TChlKTtmb3IodmFyIGE9czthLmNpcmNsZSYmTWF0aC5hYnMobi1hLmNpcmNsZS54KTxJJiZNYXRoLmFicyhpLWEuY2lyY2xlLmN5KTxJOylzPWEuUCxmLnVuc2hpZnQoYSksTChhKSxhPXM7Zi51bnNoaWZ0KGEpLHkoYSk7Zm9yKHZhciBsPXU7bC5jaXJjbGUmJk1hdGguYWJzKG4tbC5jaXJjbGUueCk8SSYmTWF0aC5hYnMoaS1sLmNpcmNsZS5jeSk8STspdT1sLk4sZi5wdXNoKGwpLEwobCksbD11O2YucHVzaChsKSx5KGwpO3ZhciBvLGM9Zi5sZW5ndGg7Zm9yKG89MTtjPm87KytvKWw9ZltvXSxhPWZbby0xXSxnKGwuZWRnZSxhLnNpdGUsbC5zaXRlLHIpO2E9ZlswXSxsPWZbYy0xXSxsLmVkZ2U9QyhhLnNpdGUsbC5zaXRlLG51bGwsciksdihhKSx2KGwpfWZ1bmN0aW9uIFIoZSl7dGhpcy5zaXRlPWUsdGhpcy5lZGdlcz1bXX1mdW5jdGlvbiBNKGUpe3JldHVybiBCW2UuaV09bmV3IFIoZSl9ZnVuY3Rpb24gVShlLHQpe3ZhciBuPWUuc2l0ZSxpPW4ueCxyPW4ueSxzPXItdDtpZighcylyZXR1cm4gaTt2YXIgdT1lLlA7aWYoIXUpcmV0dXJuLSgxLzApO249dS5zaXRlO3ZhciBmPW4ueCxhPW4ueSxsPWEtdDtpZighbClyZXR1cm4gZjt2YXIgbz1mLWksYz0xL3MtMS9sLGg9by9sO3JldHVybiBjPygtaCtNYXRoLnNxcnQoaCpoLTIqYyoobypvLygtMipsKS1hK2wvMityLXMvMikpKS9jK2k6KGkrZikvMn1mdW5jdGlvbiBOKGUsdCl7dmFyIG49ZS5OO2lmKG4pcmV0dXJuIFUobix0KTt2YXIgaT1lLnNpdGU7cmV0dXJuIGkueT09PXQ/aS54OjEvMH1mdW5jdGlvbiBQKGUpe2Zvcih2YXIgdCxuLGkscixzPWUueCx1PWUueSxmPUcuXztmOylpZihpPVUoZix1KS1zLGk+SSlmPWYuTDtlbHNle2lmKHI9cy1OKGYsdSksIShyPkkpKXtpPi1JPyh0PWYuUCxuPWYpOnI+LUk/KHQ9ZixuPWYuTik6dD1uPWY7YnJlYWt9aWYoIWYuUil7dD1mO2JyZWFrfWY9Zi5SfU0oZSk7dmFyIGE9cChlKTtpZihHLmluc2VydCh0LGEpLHR8fG4pe2lmKHQ9PT1uKXJldHVybiB5KHQpLG49cCh0LnNpdGUpLEcuaW5zZXJ0KGEsbiksYS5lZGdlPW4uZWRnZT1DKHQuc2l0ZSxhLnNpdGUpLHYodCksdm9pZCB2KG4pO2lmKCFuKXJldHVybiB2b2lkKGEuZWRnZT1DKHQuc2l0ZSxhLnNpdGUpKTt5KHQpLHkobik7dmFyIGw9dC5zaXRlLG89bC54LGM9bC55LGg9ZS54LW8seD1lLnktYyxkPW4uc2l0ZSxMPWQueC1vLGI9ZC55LWMsUj0yKihoKmIteCpMKSxQPWgqaCt4KngsXz1MKkwrYipiLG09e3g6KGIqUC14Kl8pL1Irbyx5OihoKl8tTCpQKS9SK2N9O2cobi5lZGdlLGwsZCxtKSxhLmVkZ2U9QyhsLGUsbnVsbCxtKSxuLmVkZ2U9QyhlLGQsbnVsbCxtKSx2KHQpLHYobil9fWZ1bmN0aW9uIF8oKXt0aGlzLl89bnVsbH1mdW5jdGlvbiBtKGUsdCl7dmFyIG49dCxpPXQuTCxyPW4uVTtyP3IuTD09PW4/ci5MPWk6ci5SPWk6ZS5fPWksaS5VPXIsbi5VPWksbi5MPWkuUixuLkwmJihuLkwuVT1uKSxpLlI9bn1mdW5jdGlvbiB3KGUsdCl7dmFyIG49dCxpPXQuUixyPW4uVTtyP3IuTD09PW4/ci5MPWk6ci5SPWk6ZS5fPWksaS5VPXIsbi5VPWksbi5SPWkuTCxuLlImJihuLlIuVT1uKSxpLkw9bn1mdW5jdGlvbiBrKGUpe2Zvcig7ZS5MOyllPWUuTDtyZXR1cm4gZX1mdW5jdGlvbiBxKGUsdCl7cmV0dXJuIHQueS1lLnl8fHQueC1lLnh9ZnVuY3Rpb24gQShlLHQpe3ZhciBuLGkscixzPWUuc29ydChxKS5wb3AoKTtmb3IoRD1bXSxCPW5ldyBBcnJheShlLmxlbmd0aCksRz1uZXcgXyxGPW5ldyBfOzspaWYocj1KLHMmJighcnx8cy55PHIueXx8cy55PT09ci55JiZzLng8ci54KSkocy54IT09bnx8cy55IT09aSkmJihQKHMpLG49cy54LGk9cy55KSxzPWUucG9wKCk7ZWxzZXtpZighcilicmVhaztiKHIuYXJjKX1pZih0KXt2YXIgbj10WzBdWzBdLGk9dFswXVsxXSx1PXRbMV1bMF0sZj10WzFdWzFdO2MobixpLHUsZiksYShuLGksdSxmKX12YXIgbD17Y2VsbHM6QixlZGdlczpEfTtyZXR1cm4gRz1GPUQ9Qj1udWxsLGx9ZnVuY3Rpb24gRShlKXtyZXR1cm4gZVsxXX1mdW5jdGlvbiBqKGUpe3JldHVybiBlWzBdfWZ1bmN0aW9uIHooKXtmdW5jdGlvbiBlKGUpe3ZhciB0PW5ldyBBcnJheShlLmxlbmd0aCksbj1sWzBdWzBdLGk9bFswXVsxXSxzPWxbMV1bMF0sdT1sWzFdWzFdO3JldHVybiBBKHIoZSksbCkuY2VsbHMuZm9yRWFjaChmdW5jdGlvbihyLGYpe3ZhciBhPXIuZWRnZXMsbD1yLnNpdGUsbz10W2ZdPWEubGVuZ3RoP2EubWFwKGZ1bmN0aW9uKGUpe3ZhciB0PWUuc3RhcnQoKTtyZXR1cm5bdC54LHQueV19KTpsLng+PW4mJmwueDw9cyYmbC55Pj1pJiZsLnk8PXU/W1tuLHVdLFtzLHVdLFtzLGldLFtuLGldXTpbXTtvLnBvaW50PWVbZl19KSx0fWZ1bmN0aW9uIHIoZSl7cmV0dXJuIGUubWFwKGZ1bmN0aW9uKGUsdCl7cmV0dXJue3g6TWF0aC5yb3VuZChmKGUsdCkvSSkqSSx5Ok1hdGgucm91bmQoYShlLHQpL0kpKkksaTp0fX0pfXZhciBzPWosdT1FLGY9cyxhPXUsbD1IO3JldHVybiBlLmxpbmtzPWZ1bmN0aW9uKGUpe3JldHVybiBBKHIoZSkpLmVkZ2VzLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gZS5sJiZlLnJ9KS5tYXAoZnVuY3Rpb24odCl7cmV0dXJue3NvdXJjZTplW3QubC5pXSx0YXJnZXQ6ZVt0LnIuaV19fSl9LGUudHJpYW5nbGVzPWZ1bmN0aW9uKGUpe3ZhciB0PVtdO3JldHVybiBBKHIoZSkpLmNlbGxzLmZvckVhY2goZnVuY3Rpb24ocixzKXtmb3IodmFyIHUsZixhPXIuc2l0ZSxsPXIuZWRnZXMuc29ydChpKSxvPS0xLGM9bC5sZW5ndGgsaD1sW2MtMV0uZWRnZSx5PWgubD09PWE/aC5yOmgubDsrK288YzspdT1oLGY9eSxoPWxbb10uZWRnZSx5PWgubD09PWE/aC5yOmgubCxzPGYuaSYmczx5LmkmJm4oYSxmLHkpPDAmJnQucHVzaChbZVtzXSxlW2YuaV0sZVt5LmldXSl9KSx0fSxlLng9ZnVuY3Rpb24obil7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KHM9bixmPSJmdW5jdGlvbiI9PXR5cGVvZiBuP3M6dChzKSxlKTpzfSxlLnk9ZnVuY3Rpb24obil7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KHU9bixhPSJmdW5jdGlvbiI9PXR5cGVvZiBuP3U6dCh1KSxlKTp1fSxlLmV4dGVudD1mdW5jdGlvbih0KXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8obD1udWxsPT10P0g6dCxlKTpsPT09SD9udWxsOmx9LGUuc2l6ZT1mdW5jdGlvbih0KXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD9lLmV4dGVudCh0JiZbWzAsMF0sdF0pOmw9PT1IP251bGw6bCYmbFsxXX0sZX12YXIgQixELEYsRyxIPVtbLTFlNiwtMWU2XSxbMWU2LDFlNl1dLEk9MWUtNjt1LnByb3RvdHlwZT17c3RhcnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lZGdlLmw9PT10aGlzLnNpdGU/dGhpcy5lZGdlLmE6dGhpcy5lZGdlLmJ9LGVuZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVkZ2UubD09PXRoaXMuc2l0ZT90aGlzLmVkZ2UuYjp0aGlzLmVkZ2UuYX19O3ZhciBKLEs9W10sTz0xZS0xMixRPVtdO1IucHJvdG90eXBlLnByZXBhcmU9ZnVuY3Rpb24oKXtmb3IodmFyIGUsdD10aGlzLmVkZ2VzLG49dC5sZW5ndGg7bi0tOyllPXRbbl0uZWRnZSxlLmImJmUuYXx8dC5zcGxpY2UobiwxKTtyZXR1cm4gdC5zb3J0KGkpLHQubGVuZ3RofSxfLnByb3RvdHlwZT17aW5zZXJ0OmZ1bmN0aW9uKGUsdCl7dmFyIG4saSxyO2lmKGUpe2lmKHQuUD1lLHQuTj1lLk4sZS5OJiYoZS5OLlA9dCksZS5OPXQsZS5SKXtmb3IoZT1lLlI7ZS5MOyllPWUuTDtlLkw9dH1lbHNlIGUuUj10O249ZX1lbHNlIHRoaXMuXz8oZT1rKHRoaXMuXyksdC5QPW51bGwsdC5OPWUsZS5QPWUuTD10LG49ZSk6KHQuUD10Lk49bnVsbCx0aGlzLl89dCxuPW51bGwpO2Zvcih0Lkw9dC5SPW51bGwsdC5VPW4sdC5DPSEwLGU9dDtuJiZuLkM7KWk9bi5VLG49PT1pLkw/KHI9aS5SLHImJnIuQz8obi5DPXIuQz0hMSxpLkM9ITAsZT1pKTooZT09PW4uUiYmKHcodGhpcyxuKSxlPW4sbj1lLlUpLG4uQz0hMSxpLkM9ITAsbSh0aGlzLGkpKSk6KHI9aS5MLHImJnIuQz8obi5DPXIuQz0hMSxpLkM9ITAsZT1pKTooZT09PW4uTCYmKG0odGhpcyxuKSxlPW4sbj1lLlUpLG4uQz0hMSxpLkM9ITAsdyh0aGlzLGkpKSksbj1lLlU7dGhpcy5fLkM9ITF9LHJlbW92ZTpmdW5jdGlvbihlKXtlLk4mJihlLk4uUD1lLlApLGUuUCYmKGUuUC5OPWUuTiksZS5OPWUuUD1udWxsO3ZhciB0LG4saSxyPWUuVSxzPWUuTCx1PWUuUjtpZihuPXM/dT9rKHUpOnM6dSxyP3IuTD09PWU/ci5MPW46ci5SPW46dGhpcy5fPW4scyYmdT8oaT1uLkMsbi5DPWUuQyxuLkw9cyxzLlU9bixuIT09dT8ocj1uLlUsbi5VPWUuVSxlPW4uUixyLkw9ZSxuLlI9dSx1LlU9bik6KG4uVT1yLHI9bixlPW4uUikpOihpPWUuQyxlPW4pLGUmJihlLlU9ciksIWkpe2lmKGUmJmUuQylyZXR1cm4gdm9pZChlLkM9ITEpO2Rve2lmKGU9PT10aGlzLl8pYnJlYWs7aWYoZT09PXIuTCl7aWYodD1yLlIsdC5DJiYodC5DPSExLHIuQz0hMCx3KHRoaXMsciksdD1yLlIpLHQuTCYmdC5MLkN8fHQuUiYmdC5SLkMpe3QuUiYmdC5SLkN8fCh0LkwuQz0hMSx0LkM9ITAsbSh0aGlzLHQpLHQ9ci5SKSx0LkM9ci5DLHIuQz10LlIuQz0hMSx3KHRoaXMsciksZT10aGlzLl87YnJlYWt9fWVsc2UgaWYodD1yLkwsdC5DJiYodC5DPSExLHIuQz0hMCxtKHRoaXMsciksdD1yLkwpLHQuTCYmdC5MLkN8fHQuUiYmdC5SLkMpe3QuTCYmdC5MLkN8fCh0LlIuQz0hMSx0LkM9ITAsdyh0aGlzLHQpLHQ9ci5MKSx0LkM9ci5DLHIuQz10LkwuQz0hMSxtKHRoaXMsciksZT10aGlzLl87YnJlYWt9dC5DPSEwLGU9cixyPXIuVX13aGlsZSghZS5DKTtlJiYoZS5DPSExKX19fSxlLnZvcm9ub2k9en0pOw0KDQovKiBodHRwczovL2dpdGh1Yi5jb20vZDMvZDMtdGltZXIgQ29weXJpZ2h0IDIwMTUgTWlrZSBCb3N0b2NrICovDQoidW5kZWZpbmVkIj09dHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZSYmKHJlcXVlc3RBbmltYXRpb25GcmFtZT0idW5kZWZpbmVkIiE9dHlwZW9mIHdpbmRvdyYmKHdpbmRvdy5tc1JlcXVlc3RBbmltYXRpb25GcmFtZXx8d2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZXx8d2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZXx8d2luZG93Lm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWUpfHxmdW5jdGlvbihlKXtyZXR1cm4gc2V0VGltZW91dChlLDE3KX0pLGZ1bmN0aW9uKGUsbil7Im9iamVjdCI9PXR5cGVvZiBleHBvcnRzJiYidW5kZWZpbmVkIiE9dHlwZW9mIG1vZHVsZT9uKGV4cG9ydHMpOiJmdW5jdGlvbiI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFsiZXhwb3J0cyJdLG4pOm4oZS50aW1lcj17fSl9KHRoaXMsZnVuY3Rpb24oZSl7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIG4oKXtyPW09MCxjPTEvMCx0KHUoKSl9ZnVuY3Rpb24gdChlKXtpZighcil7dmFyIHQ9ZS1EYXRlLm5vdygpO3Q+MjQ/Yz5lJiYobSYmY2xlYXJUaW1lb3V0KG0pLG09c2V0VGltZW91dChuLHQpLGM9ZSk6KG0mJihtPWNsZWFyVGltZW91dChtKSxjPTEvMCkscj1yZXF1ZXN0QW5pbWF0aW9uRnJhbWUobikpfX1mdW5jdGlvbiBpKGUsbixpKXtpPW51bGw9PWk/RGF0ZS5ub3coKToraSxudWxsIT1uJiYoaSs9K24pO3ZhciBvPXtjYWxsYmFjazplLHRpbWU6aSxmbHVzaDohMSxuZXh0Om51bGx9O2E/YS5uZXh0PW86Zj1vLGE9byx0KGkpfWZ1bmN0aW9uIG8oZSxuLHQpe3Q9bnVsbD09dD9EYXRlLm5vdygpOit0LG51bGwhPW4mJih0Kz0rbiksbC5jYWxsYmFjaz1lLGwudGltZT10fWZ1bmN0aW9uIHUoZSl7ZT1udWxsPT1lP0RhdGUubm93KCk6K2U7dmFyIG49bDtmb3IobD1mO2w7KWU+PWwudGltZSYmKGwuZmx1c2g9bC5jYWxsYmFjayhlLWwudGltZSxlKSksbD1sLm5leHQ7bD1uLGU9MS8wO2Zvcih2YXIgdCxpPWY7aTspaS5mbHVzaD9pPXQ/dC5uZXh0PWkubmV4dDpmPWkubmV4dDooaS50aW1lPGUmJihlPWkudGltZSksaT0odD1pKS5uZXh0KTtyZXR1cm4gYT10LGV9dmFyIGEsbSxyLGYsbCxjPTEvMDtlLnRpbWVyPWksZS50aW1lclJlcGxhY2U9byxlLnRpbWVyRmx1c2g9dX0pOw0KDQp2YXIgY2FudmFzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiY2FudmFzIiksDQogICAgd2lkdGggPSBjYW52YXMud2lkdGgsDQogICAgaGVpZ2h0ID0gY2FudmFzLmhlaWdodCwNCiAgICBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoIjJkIiksDQogICAgdm9ybyA9IHZvcm9ub2kudm9yb25vaSgpLmV4dGVudChbWzAuNSwgMC41XSwgW3dpZHRoIC0gMC41LCBoZWlnaHQgLSAwLjVdXSk7DQoNCnZhciBuID0gMTAwLA0KICAgIHBhcnRpY2xlcyA9IG5ldyBBcnJheShuKTsNCg0KZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpIHBhcnRpY2xlc1tpXSA9IHswOiBNYXRoLnJhbmRvbSgpICogd2lkdGgsIDE6IE1hdGgucmFuZG9tKCkgKiBoZWlnaHQsIHZ4OiAwLCB2eTogMH07DQoNCnRpbWVyLnRpbWVyKGZ1bmN0aW9uKGVsYXBzZWQpIHsNCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpIHsNCiAgICB2YXIgcCA9IHBhcnRpY2xlc1tpXTsNCiAgICBwWzBdICs9IHAudng7IGlmIChwWzBdIDwgMCkgcFswXSA9IHAudnggKj0gLTE7IGVsc2UgaWYgKHBbMF0gPiB3aWR0aCkgcFswXSA9IHdpZHRoICsgKHAudnggKj0gLTEpOw0KICAgIHBbMV0gKz0gcC52eTsgaWYgKHBbMV0gPCAwKSBwWzFdID0gcC52eSAqPSAtMTsgZWxzZSBpZiAocFsxXSA+IGhlaWdodCkgcFsxXSA9IGhlaWdodCArIChwLnZ5ICo9IC0xKTsNCiAgICBwLnZ4ICs9IDAuMSAqIChNYXRoLnJhbmRvbSgpIC0gLjUpIC0gMC4wMSAqIHAudng7DQogICAgcC52eSArPSAwLjEgKiAoTWF0aC5yYW5kb20oKSAtIC41KSAtIDAuMDEgKiBwLnZ5Ow0KICB9DQoNCiAgdmFyIGNlbGxzID0gdm9ybyhwYXJ0aWNsZXMpOw0KICBjb250ZXh0LmNsZWFyUmVjdCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTsNCg0KICBjb250ZXh0LmJlZ2luUGF0aCgpOw0KICBjZWxscy5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwpIHsgZHJhd1BvbHlnb25JbmNpcmNsZShjZWxsLCAtMi41KTsgfSk7DQogIGNvbnRleHQuZmlsbFN0eWxlID0gIiNkZGQiOw0KICBjb250ZXh0LmZpbGwoKTsNCg0KICBjb250ZXh0LmJlZ2luUGF0aCgpOw0KICBjZWxscy5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwpIHsgZHJhd1BvbHlnb24oY2VsbCk7IH0pOw0KICBjb250ZXh0LmxpbmVXaWR0aCA9IDE7DQogIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSAiI2FhYSI7DQogIGNvbnRleHQuc3Ryb2tlKCk7DQoNCiAgY29udGV4dC5iZWdpblBhdGgoKTsNCiAgcGFydGljbGVzLmZvckVhY2goZnVuY3Rpb24ocGFydGljbGUpIHsgZHJhd1BvaW50KHBhcnRpY2xlKTsgfSk7DQogIGNvbnRleHQuZmlsbFN0eWxlID0gIiMwMDAiOw0KICBjb250ZXh0LmZpbGwoKTsNCn0pOw0KDQpmdW5jdGlvbiBkcmF3UG9pbnQocG9pbnQpIHsNCiAgY29udGV4dC5tb3ZlVG8ocG9pbnRbMF0gKyAxLjUsIHBvaW50WzFdKTsNCiAgY29udGV4dC5hcmMocG9pbnRbMF0sIHBvaW50WzFdLCAxLjUsIDAsIDIgKiBNYXRoLlBJKTsNCn0NCg0KZnVuY3Rpb24gZHJhd1BvbHlnb24ocG9pbnRzKSB7DQogIGNvbnRleHQubW92ZVRvKHBvaW50c1swXVswXSwgcG9pbnRzWzBdWzFdKTsNCiAgZm9yICh2YXIgaSA9IDEsIG4gPSBwb2ludHMubGVuZ3RoOyBpIDwgbjsgKytpKSBjb250ZXh0LmxpbmVUbyhwb2ludHNbaV1bMF0sIHBvaW50c1tpXVsxXSk7DQogIGNvbnRleHQuY2xvc2VQYXRoKCk7DQp9DQoNCmZ1bmN0aW9uIGRyYXdQb2x5Z29uSW5jaXJjbGUocG9pbnRzLCBvZmZzZXRSYWRpdXMpIHsNCiAgdmFyIGNpcmNsZSA9IHBvbHlnb25JbmNpcmNsZShwb2ludHMpLA0KICAgICAgcmFkaXVzID0gY2lyY2xlLnJhZGl1cyArIG9mZnNldFJhZGl1czsNCiAgaWYgKHJhZGl1cyA+IDApIHsNCiAgICBjb250ZXh0Lm1vdmVUbyhjaXJjbGVbMF0gKyByYWRpdXMsIGNpcmNsZVsxXSk7DQogICAgY29udGV4dC5hcmMoY2lyY2xlWzBdLCBjaXJjbGVbMV0sIHJhZGl1cywgMCwgMiAqIE1hdGguUEkpOw0KICB9DQp9DQoNCi8vIEEgaG9ycmlibGUgYnJ1dGUtZm9yY2UgYWxnb3JpdGhtIGZvciBkZXRlcm1pbmluZyB0aGUgbGFyZ2VzdCBjaXJjbGUgdGhhdCBjYW4NCi8vIGZpdCBpbnNpZGUgYSBjb252ZXggcG9seWdvbi4gRm9yIGVhY2ggZGlzdGluY3Qgc2V0IG9mIHRocmVlIHNpZGVzIG9mIHRoZQ0KLy8gcG9seWdvbiwgY29tcHV0ZSB0aGUgdGFuZ2VudCBjaXJjbGUuIFRoZW4gcmVkdWNlIHRoZSBjaXJjbGXigJlzIHJhZGl1cyBhZ2FpbnN0DQovLyB0aGUgcmVtYWluaW5nIHNpZGVzIG9mIHRoZSBwb2x5Z29uLg0KZnVuY3Rpb24gcG9seWdvbkluY2lyY2xlKHBvaW50cykgew0KICB2YXIgY2lyY2xlID0ge3JhZGl1czogMH07DQoNCiAgZm9yICh2YXIgaSA9IDAsIG4gPSBwb2ludHMubGVuZ3RoOyBpIDwgbjsgKytpKSB7DQogICAgdmFyIHBpMCA9IHBvaW50c1tpXSwNCiAgICAgICAgcGkxID0gcG9pbnRzWyhpICsgMSkgJSBuXTsNCiAgICBmb3IgKHZhciBqID0gaSArIDE7IGogPCBuOyArK2opIHsNCiAgICAgIHZhciBwajAgPSBwb2ludHNbal0sDQogICAgICAgICAgcGoxID0gcG9pbnRzWyhqICsgMSkgJSBuXSwNCiAgICAgICAgICBwaWogPSBqID09PSBpICsgMSA/IHBqMCA6IGxpbmVMaW5lSW50ZXJzZWN0aW9uKHBpMFswXSwgcGkwWzFdLCBwaTFbMF0sIHBpMVsxXSwgcGowWzBdLCBwajBbMV0sIHBqMVswXSwgcGoxWzFdKTsNCiAgICAgIHNlYXJjaDogZm9yICh2YXIgayA9IGogKyAxOyBrIDwgbjsgKytrKSB7DQogICAgICAgIHZhciBwazAgPSBwb2ludHNba10sDQogICAgICAgICAgICBwazEgPSBwb2ludHNbKGsgKyAxKSAlIG5dLA0KICAgICAgICAgICAgcGlrID0gbGluZUxpbmVJbnRlcnNlY3Rpb24ocGkwWzBdLCBwaTBbMV0sIHBpMVswXSwgcGkxWzFdLCBwazBbMF0sIHBrMFsxXSwgcGsxWzBdLCBwazFbMV0pLA0KICAgICAgICAgICAgcGprID0gayA9PT0gaiArIDEgPyBwazAgOiBsaW5lTGluZUludGVyc2VjdGlvbihwajBbMF0sIHBqMFsxXSwgcGoxWzBdLCBwajFbMV0sIHBrMFswXSwgcGswWzFdLCBwazFbMF0sIHBrMVsxXSksDQogICAgICAgICAgICBjYW5kaWRhdGUgPSB0cmlhbmdsZUluY2lyY2xlKHBpalswXSwgcGlqWzFdLCBwaWtbMF0sIHBpa1sxXSwgcGprWzBdLCBwamtbMV0pLA0KICAgICAgICAgICAgcmFkaXVzID0gY2FuZGlkYXRlLnJhZGl1czsNCg0KICAgICAgICBmb3IgKHZhciBsID0gMDsgbCA8IG47ICsrbCkgew0KICAgICAgICAgIHZhciBwbDAgPSBwb2ludHNbbF0sDQogICAgICAgICAgICAgIHBsMSA9IHBvaW50c1sobCArIDEpICUgbl0sDQogICAgICAgICAgICAgIHIgPSBwb2ludExpbmVEaXN0YW5jZShjYW5kaWRhdGVbMF0sIGNhbmRpZGF0ZVsxXSwgcGwwWzBdLCBwbDBbMV0sIHBsMVswXSwgcGwxWzFdKTsNCiAgICAgICAgICBpZiAociA8IGNpcmNsZS5yYWRpdXMpIGNvbnRpbnVlIHNlYXJjaDsNCiAgICAgICAgICBpZiAociA8IHJhZGl1cykgcmFkaXVzID0gcjsNCiAgICAgICAgfQ0KDQogICAgICAgIGNpcmNsZSA9IGNhbmRpZGF0ZTsNCiAgICAgICAgY2lyY2xlLnJhZGl1cyA9IHJhZGl1czsNCiAgICAgIH0NCiAgICB9DQogIH0NCg0KICByZXR1cm4gY2lyY2xlOw0KfQ0KDQovLyBSZXR1cm5zIHRoZSBpbmNpcmNsZSBvZiB0aGUgdHJpYW5nbGUgMDEyLg0KZnVuY3Rpb24gdHJpYW5nbGVJbmNpcmNsZSh4MCwgeTAsIHgxLCB5MSwgeDIsIHkyKSB7DQogIHZhciB4MDEgPSB4MCAtIHgxLCB5MDEgPSB5MCAtIHkxLA0KICAgICAgeDAyID0geDAgLSB4MiwgeTAyID0geTAgLSB5MiwNCiAgICAgIHgxMiA9IHgxIC0geDIsIHkxMiA9IHkxIC0geTIsDQogICAgICBsMDEgPSBNYXRoLnNxcnQoeDAxICogeDAxICsgeTAxICogeTAxKSwNCiAgICAgIGwwMiA9IE1hdGguc3FydCh4MDIgKiB4MDIgKyB5MDIgKiB5MDIpLA0KICAgICAgbDEyID0gTWF0aC5zcXJ0KHgxMiAqIHgxMiArIHkxMiAqIHkxMiksDQogICAgICBrMCA9IGwwMSAvIChsMDEgKyBsMDIpLA0KICAgICAgazEgPSBsMTIgLyAobDEyICsgbDAxKSwNCiAgICAgIGNlbnRlciA9IGxpbmVMaW5lSW50ZXJzZWN0aW9uKHgwLCB5MCwgeDEgLSBrMCAqIHgxMiwgeTEgLSBrMCAqIHkxMiwgeDEsIHkxLCB4MiArIGsxICogeDAyLCB5MiArIGsxICogeTAyKTsNCiAgY2VudGVyLnJhZGl1cyA9IE1hdGguc3FydCgobDAyICsgbDEyIC0gbDAxKSAqIChsMTIgKyBsMDEgLSBsMDIpICogKGwwMSArIGwwMiAtIGwxMikgLyAobDAxICsgbDAyICsgbDEyKSkgLyAyOw0KICByZXR1cm4gY2VudGVyOw0KfQ0KDQovLyBSZXR1cm5zIHRoZSBpbnRlcnNlY3Rpb24gb2YgdGhlIGluZmluaXRlIGxpbmVzIDAxIGFuZCAyMy4NCmZ1bmN0aW9uIGxpbmVMaW5lSW50ZXJzZWN0aW9uKHgwLCB5MCwgeDEsIHkxLCB4MiwgeTIsIHgzLCB5Mykgew0KICB2YXIgeDAyID0geDAgLSB4MiwgeTAyID0geTAgLSB5MiwNCiAgICAgIHgxMCA9IHgxIC0geDAsIHkxMCA9IHkxIC0geTAsDQogICAgICB4MzIgPSB4MyAtIHgyLCB5MzIgPSB5MyAtIHkyLA0KICAgICAgdCA9ICh4MzIgKiB5MDIgLSB5MzIgKiB4MDIpIC8gKHkzMiAqIHgxMCAtIHgzMiAqIHkxMCk7DQogIHJldHVybiBbeDAgKyB0ICogeDEwLCB5MCArIHQgKiB5MTBdOw0KfQ0KDQovLyBSZXR1cm5zIHRoZSBzaWduZWQgZGlzdGFuY2UgZnJvbSBwb2ludCAwIHRvIHRoZSBpbmZpbml0ZSBsaW5lIDEyLg0KZnVuY3Rpb24gcG9pbnRMaW5lRGlzdGFuY2UoeDAsIHkwLCB4MSwgeTEsIHgyLCB5Mikgew0KICB2YXIgeDIxID0geDIgLSB4MSwgeTIxID0geTIgLSB5MTsNCiAgcmV0dXJuICh5MjEgKiB4MCAtIHgyMSAqIHkwICsgeDIgKiB5MSAtIHkyICogeDEpIC8gTWF0aC5zcXJ0KHkyMSAqIHkyMSArIHgyMSAqIHgyMSk7DQp9DQoNCjwvc2NyaXB0Pg=='
]

{ #category : #examples }
RSAttributedText >> tagAll: word in: aString with: anAttribute [
	(aString allRangesOfSubstring: word) do: [ :range |
		self 
			addAttribute: anAttribute new 
			from: range first 
			to: range last.
	]
]

{ #category : #accessing }
RSAttributedText >> text [
	^ text
]

{ #category : #accessing }
RSAttributedText >> text: aString [
	text := aString ,' '
]
